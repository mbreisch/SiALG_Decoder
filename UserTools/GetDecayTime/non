#include "GetDecayTime.h"

GetDecayTime::GetDecayTime():Tool(){}


bool GetDecayTime::Initialise(std::string configfile, DataModel &data)
{
    if(configfile!="")  m_variables.Initialise(configfile);
    //m_variables.Print();

    m_data= &data;
    m_log= m_data->Log;


    if(!m_variables.Get("verbose",m_verbose)) m_verbose=1;
    if(!m_variables.Get("visibility",m_visibility)) m_visibility=0;
    if(!m_variables.Get("ROI_low",ROI_low)) ROI_low=0;
    if(!m_variables.Get("ROI_high",ROI_high)) ROI_high=1023;

    if(!m_variables.Get("gu",threshold_multiplier)) threshold_multiplier=0.5;      
    if(!m_variables.Get("guess_sigma",guess_sigma)) guess_sigma=0.5;     
    if(!m_variables.Get("guess_t0",guess_t0)) guess_t0=0.5;     
    if(!m_variables.Get("guess_n0",guess_n0)) guess_n0=0.5;     
    if(!m_variables.Get("guess_tau0",guess_tau0)) guess_tau0=0.5;     
    if(!m_variables.Get("guess_n1",guess_n1)) guess_n1=0.5;     
    if(!m_variables.Get("guess_tau1",guess_tau1)) guess_tau1=0.5;     
    if(!m_variables.Get("guess_n2",guess_n2)) guess_n2=0.5;     
    if(!m_variables.Get("guess_tau2",guess_tau2)) guess_tau2=0.5;    
    if(!m_variables.Get("guess_n3",guess_n3)) guess_n3=0.5;     
    if(!m_variables.Get("guess_tau3",guess_tau3)) guess_tau3=0.5;    
    if(!m_variables.Get("guess_offset",guess_offset)) guess_offset=0.5;   

    if(!m_variables.Get("n_bins",n_bins)) n_bins=1;
    if(!m_variables.Get("bins_start",bins_start)) bins_start=0;    
    if(!m_variables.Get("bins_end",bins_end)) bins_end=1;        

    if(!m_variables.Get("fit_start",fit_start)) fit_start=0;    
    if(!m_variables.Get("fit_end",fit_end)) fit_end=1;        


    return true;
}


bool GetDecayTime::Execute()
{
    if(m_data->TD.Stop==true)
    {
        std::cout <<"Stop has been called, skipping Decay calculator"<<std::endl;
        return true;
    }

    if(m_data->TD.EndOfRun==true)
    {
        std::cout <<"Run-End has been called, skipping Decay calculator and cleaning up"<<std::endl;
        for(int i_channel: m_data->TD.ListOfChannels)
        {
            if(i_channel==16 ||i_channel==17){continue;}
            vector<float> c_histogram = m_data->TD.TTS_Map[i_channel];

            FitDecay(i_channel,c_histogram);
        }
        return true;
    }

    if(m_data->TD.NewRun==true)
    {
        InitRoot();
    }

    return true;
}


bool GetDecayTime::Finalise()
{
    return true;
}

Double_t Sum_of_Exp(Double_t *x, Double_t *par) 
{
        
    
    Double_t sigma = par[0];
    Double_t x0 = par[1];
    Double_t n_0 = par[2];
    Double_t tau_0 = par[3];
    Double_t n_1 = par[4];
    Double_t tau_1 = par[5];
    Double_t n_2 = par[6];
    Double_t tau_2 = par[7];
    Double_t n_3 = par[8];
    Double_t tau_3 = par[9];
    Double_t offset = par[10];

    return  TMath::Exp(-(x[0]*x[0])/(sigma*sigma))*0 + 1* 
            (
                (n_0/tau_0) * TMath::Exp(-(x[0] - x0)/tau_0) +
                (n_1/tau_1) * TMath::Exp(-(x[0] - x0)/tau_1) +
                (n_2/tau_2) * TMath::Exp(-(x[0] - x0)/tau_2) +
                (n_3/tau_3) * TMath::Exp(-(x[0] - x0)/tau_3)
            ) + offset;

}


Double_t Single_Exp(Double_t *x, Double_t *par)
{
    Double_t sigma = par[0];
    Double_t x0 = par[1];
    Double_t n_0 = par[2];
    Double_t tau_0 = par[3];
    Double_t offset = par[4];

    return TMath::Exp(-(x[0]*x[0])/(sigma*sigma))*0 + 1* 
            (
                (n_0/tau_0) * TMath::Exp(-(x[0] - x0)/tau_0)
            ) + offset;
}

void GetDecayTime::FitDecay(int channel, vector<float> data)
{
    if(data.size()==0){return;}

    TH1F *hist = new TH1F("hist", "Example Histogram", n_bins,bins_start,bins_end);
    for(float k: data) 
    {
        hist->Fill(k);
    }

    // Create a TF1 function and set its parameters
    TF1 *fit_function = new TF1("fit_function", Sum_of_Exp, fit_start, fit_end, 11); // 8 is the number of parameters
    fit_function->SetParameters(guess_sigma, guess_t0, guess_n0, guess_tau0, guess_n1, guess_tau1, guess_n2, guess_tau2, guess_n3, guess_tau3, guess_offset); // initial guesses for parameters

    // Set bounds for sigma between 0 and 10
    fit_function->SetParLimits(0, 0, 10);

    // Set bounds for t0 between -10 and 10
    fit_function->SetParLimits(1, -100, 0);

    // Set bounds for n_0 between 0 and 100
    fit_function->SetParLimits(2, 0, 1);

    // Set bounds for tau_0 between 0 and 10
    fit_function->SetParLimits(3, 0, 1000);

    // Set bounds for n_1 between 0 and 100
    fit_function->SetParLimits(4, 0, 1);

    // Set bounds for tau_1 between 0 and 10
    fit_function->SetParLimits(5, 0, 1000);

    // Set bounds for n_2 between 0 and 100
    fit_function->SetParLimits(6, 0, 1);

    // Set bounds for tau_2 between 0 and 10
    fit_function->SetParLimits(7, 0, 1000);

    // Set bounds for n_3 between 0 and 100
    fit_function->SetParLimits(8, 0, 1);

    // Set bounds for tau_3 between 0 and 10
    fit_function->SetParLimits(9, 0, 1000);

    // Set bounds for offset between 0 and 10
    fit_function->SetParLimits(10, 0, 100);


    // Perform the fit
    hist->Fit(fit_function, "RQ"); // "S" for using the sum of squares method

    // Access the fit results
    Double_t fit_sigma = fit_function->GetParameter(0);
    Double_t fit_t0 = fit_function->GetParameter(1);
    Double_t fit_n_0 = fit_function->GetParameter(2);
    Double_t fit_tau_0 = fit_function->GetParameter(3);
    Double_t fit_n_1 = fit_function->GetParameter(4);
    Double_t fit_tau_1 =  fit_function->GetParameter(5);;
    Double_t fit_n_2 = fit_function->GetParameter(6);
    Double_t fit_tau_2 = fit_function->GetParameter(7);
    Double_t fit_n_3 = fit_function->GetParameter(8);
    Double_t fit_tau_3 = fit_function->GetParameter(9);
    Double_t fit_offset = fit_function->GetParameter(10);

    // Print the results
    printf("%s\n","---------------");
    printf("Fit result, channel %i: sigma = %f, t0 = %f, n0 = %f, tau0 = %f, n1 = %f, tau1 = %f, n2 = %f, tau2 = %f, n3 = %f, tau3 = %f, offset = %f\n", channel, 
           fit_sigma, fit_t0, fit_n_0, fit_tau_0, fit_n_1, fit_tau_1, fit_n_2, fit_tau_2, fit_n_3, fit_tau_3, fit_offset);
    printf("%s\n","---------------");

    // Create a TF1 function for Single_Exp using the fit parameters
    TF1 *singleExpFunc0 = new TF1("singleExpFunc0", Single_Exp, fit_start, fit_end, 5); // 4 parameters for Single_Exp
    singleExpFunc0->SetParameters(fit_sigma, fit_t0, fit_n_0, fit_tau_0, fit_offset);
    singleExpFunc0->SetLineColor(kBlue);
    singleExpFunc0->SetLineStyle(2);
    // Create a TF1 function for Single_Exp using the fit parameters
    TF1 *singleExpFunc1 = new TF1("singleExpFunc1", Single_Exp, fit_start, fit_end, 5); // 4 parameters for Single_Exp
    singleExpFunc1->SetParameters(fit_sigma, fit_t0, fit_n_1, fit_tau_1, fit_offset);
    singleExpFunc1->SetLineColor(kGreen);
    singleExpFunc1->SetLineStyle(2);
    // Create a TF1 function for Single_Exp using the fit parameters
    TF1 *singleExpFunc2 = new TF1("singleExpFunc2", Single_Exp, fit_start, fit_end, 5); // 4 parameters for Single_Exp
    singleExpFunc2->SetParameters(fit_sigma, fit_t0, fit_n_2, fit_tau_2, fit_offset);
    singleExpFunc2->SetLineColor(kViolet);
    singleExpFunc2->SetLineStyle(2);
    // Create a TF1 function for Single_Exp using the fit parameters
    TF1 *singleExpFunc3 = new TF1("singleExpFunc3", Single_Exp, fit_start, fit_end, 5); // 4 parameters for Single_Exp
    singleExpFunc3->SetParameters(fit_sigma, fit_t0, fit_n_3, fit_tau_3, fit_offset);
    singleExpFunc3->SetLineColor(kGray);
    singleExpFunc3->SetLineStyle(2);


    // Visualize the fit result
    if(m_visibility==1)
    {
        TApplication app("myApp", nullptr, nullptr);
        TCanvas* canvas = new TCanvas("canvas", "Fit Result");
        hist->Draw(); // Draw the original graph
        fit_function->Draw("same"); // Draw the fitted function on top
        singleExpFunc0->Draw("same");
        singleExpFunc1->Draw("same");
        singleExpFunc2->Draw("same");
        singleExpFunc3->Draw("same");
        canvas->Update();
        std::string name = m_data->TD.Path_Out+"Event_"+to_string(m_data->TD.EventCounter)+"ch_"+to_string(channel)+".png";
        canvas->SaveAs(name.c_str());  // Save the plot to a file
        canvas->Draw();
        app.Run();

        delete canvas;
    }else
    {
        TCanvas* canvas = new TCanvas("canvas", "Fit Result");
        canvas->SetLogy(); 
        hist->Draw(); // Draw the original graph
        fit_function->Draw("same"); // Draw the fitted function on top
        singleExpFunc0->Draw("same");
        singleExpFunc1->Draw("same");
        singleExpFunc2->Draw("same");
        singleExpFunc3->Draw("same");
        canvas->Update();
        std::string name = m_data->TD.Path_Out+"Event_ch_"+to_string(channel)+".png";
        canvas->SaveAs(name.c_str());  // Save the plot to a file
        canvas->Draw();
        delete canvas;
    }

    // Clean up
    delete hist;
    delete fit_function;
}

void GetDecayTime::InitRoot()
{
    m_data->TD.TTree_Analysis_DecayTime = new TTree("TTree_Analysis_DecayTime", "TTree_Analysis_DecayTime");
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch0", &Decay_Ch0);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch1", &Decay_Ch1);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch2", &Decay_Ch2);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch3", &Decay_Ch3);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch4", &Decay_Ch4);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch5", &Decay_Ch5);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch6", &Decay_Ch6);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch7", &Decay_Ch7);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch8", &Decay_Ch8);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch9", &Decay_Ch9);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch10", &Decay_Ch10);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch11", &Decay_Ch11);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch12", &Decay_Ch12);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch13", &Decay_Ch13);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch14", &Decay_Ch14);
    m_data->TD.TTree_Analysis_DecayTime->Branch("Decay_Ch15", &Decay_Ch15);  
}
